// 1.Getting Started with React Redux
// 2.Manage State Locally First
class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    };
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }

  // Add handleChange() and submitMessage() methods here

  handleChange(event) {
    this.setState({
      input: event.target.value,
      messages: this.state.messages // Keep previous messages
    });
  }
  
  submitMessage() {
    this.setState({
      input: '', // Clear input after submit
      messages: [...this.state.messages, this.state.input] // Add current input to messages
    });
  }

  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        { /* Render an input, button, and ul below this line */ }
        <input value={this.state.input} onChange={this.handleChange} />
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.state.messages.map((message, index) => (
            <li key={index}>{message}</li>
          ))}
        </ul>
        { /* Change code above this line */ }
      </div>
    );
  }
};

// 3.Extract State Logic to Redux
// define an action type ADD
const ADD = 'ADD';

// define addMessage()
const addMessage = (message) => ({
  type: ADD,
  message
});

// define messageReducer()
const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [...state, action.message];
    default:
      return state;
  }
};

// Create a Redux Store
let store = Redux.createStore(messageReducer);

// 4.Use Provider to Connect Redux to React
